// Package clients is auto-generated by gogen/namespacebuilder.go
//
// It provides funcs for instantiating the clients namespace.
//
// To instantiate the clients namespace, first call [NewClientLibrary] and then either call 
// [Build] or [BuildWithParent].
// 
// See [golang.NamespaceBuilder] docs for more information about the behavior of [Build]
package clients

import (
	"blueprint/testclients/pool"
	"github.com/blueprint-uservices/cldrel_course/luggageshare/workflow"
	"blueprint/testclients/http"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
)

// Initializes the clients namespace by defining all of the nodes that run
// within the namespace.
//
// [Build] or [BuildWithParent] must be called on the return value of this func
// to actually build and run the nodes in the namespace.
func NewClientLibrary(name string) *golang.NamespaceBuilder {
	b := golang.NewNamespaceBuilder(name)
	set_clients_Args(b)
	set_clients_Instances(b)
	set_clients_Definitions(b)
	return b
}

// clients requires that its arguments are either:
//  - explicitly set with [golang.NamespaceBuilder.Set]
//  - passed on the command line (if built using [golang.NamespaceBuilder.Build])
//  - are defined in parent (if built using [golang.NamespaceBuilder.BuildWithParent])
//
// The following arguments will be eagerly checked and building the namespace
// will fail if they haven't been provided:
//
// The following arguments are optional and a failure will only occur if the client
// tries to build a node that needs the argument to be set
//   frontend_service.http.dial_addr
//   luggage_service.http.dial_addr
//   reserv_service.http.dial_addr
//   review_service.http.dial_addr
//   search_service.http.dial_addr
//   user_service.http.dial_addr
func set_clients_Args(b *golang.NamespaceBuilder) {
	b.Optional("frontend_service.http.dial_addr", "Argument generated by Blueprint IR: frontend_service.http.dial_addr = AddressConfig()")
	b.Optional("luggage_service.http.dial_addr", "Argument generated by Blueprint IR: luggage_service.http.dial_addr = AddressConfig()")
	b.Optional("reserv_service.http.dial_addr", "Argument generated by Blueprint IR: reserv_service.http.dial_addr = AddressConfig()")
	b.Optional("review_service.http.dial_addr", "Argument generated by Blueprint IR: review_service.http.dial_addr = AddressConfig()")
	b.Optional("search_service.http.dial_addr", "Argument generated by Blueprint IR: search_service.http.dial_addr = AddressConfig()")
	b.Optional("user_service.http.dial_addr", "Argument generated by Blueprint IR: user_service.http.dial_addr = AddressConfig()")
}

// When the clients namespace is built it will automatically instantiate
// the following nodes:
func set_clients_Instances(b *golang.NamespaceBuilder) {
}

// The clients namespace contains definitions for instantiating
// the following nodes:
//   frontend_service.client
//   frontend_service.http_client
//   luggage_service.client
//   luggage_service.clientpool
//   reserv_service.client
//   reserv_service.http_client
//   review_service.client
//   review_service.http_client
//   search_service.client
//   search_service.http_client
//   user_service.client
//   user_service.http_client
func set_clients_Definitions(b *golang.NamespaceBuilder) {
	b.Define("frontend_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.FrontendService
		err := n.Get("frontend_service.http_client", &client)
		return client, err
	})
	
	b.Define("frontend_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("frontend_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_FrontendService_HTTPClient(n.Context(), addr)
	})
	
	b.Define("luggage_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.LuggageService
		err := n.Get("luggage_service.clientpool", &client)
		return client, err
	})
	
	b.Define("luggage_service.clientpool", func(n *golang.Namespace) (any, error) {
		return pool.New_LuggageService_Pool(n), nil
	})
	
	b.Define("reserv_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.ReservationService
		err := n.Get("reserv_service.http_client", &client)
		return client, err
	})
	
	b.Define("reserv_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("reserv_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_ReservationService_HTTPClient(n.Context(), addr)
	})
	
	b.Define("review_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.ReviewService
		err := n.Get("review_service.http_client", &client)
		return client, err
	})
	
	b.Define("review_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("review_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_ReviewService_HTTPClient(n.Context(), addr)
	})
	
	b.Define("search_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.SearchService
		err := n.Get("search_service.http_client", &client)
		return client, err
	})
	
	b.Define("search_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("search_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_SearchService_HTTPClient(n.Context(), addr)
	})
	
	b.Define("user_service.client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin workflow/ir_workflowservice.go
		var client workflow.UserProfileService
		err := n.Get("user_service.http_client", &client)
		return client, err
	})
	
	b.Define("user_service.http_client", func(n *golang.Namespace) (any, error) {
		// Auto-generated by the golang plugin gogen/namespacebuilder.go
		var addr string
		if err := n.Get("user_service.http.dial_addr", &addr); err != nil {
			return nil, err
		}
		
		return http.New_UserProfileService_HTTPClient(n.Context(), addr)
	})
	
}
