// This file is auto-generated by the Blueprint clientpool plugin
package pool

import (
	"fmt"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/clientpool"
	"github.com/blueprint-uservices/blueprint/runtime/plugins/golang"
	"blueprint/testclients/healthcheck"
	"github.com/blueprint-uservices/cldrel_course/luggageshare/workflow"
	"context"
)

type LuggageService_HealthChecker_ClientPool struct {
	clients *clientpool.ClientPool[healthcheck.LuggageService_HealthChecker]
}

func New_LuggageService_Pool(parent *golang.Namespace) *LuggageService_HealthChecker_ClientPool {
	i := 0
	createClient := func() (healthcheck.LuggageService_HealthChecker, error) {
		clientName := fmt.Sprintf("luggage_service.clientpool.%v", i)
		n, err := New_LuggageService_PoolClient(clientName).BuildWithParent(parent)
		if err != nil {
			return nil, err
		}
		i++
		var client healthcheck.LuggageService_HealthChecker
		err = n.Get("luggage_service.http_client", &client)
		return client, err
	}
	clients := clientpool.NewClientPool(1, createClient)
	return &LuggageService_HealthChecker_ClientPool{clients: clients}
}


func (pool *LuggageService_HealthChecker_ClientPool) AddItem(ctx context.Context, item workflow.LuggageItem) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.AddItem(ctx, item)
}

func (pool *LuggageService_HealthChecker_ClientPool) Cleanup(ctx context.Context) (err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Cleanup(ctx)
}

func (pool *LuggageService_HealthChecker_ClientPool) FindItems(ctx context.Context, color string, length int64, breadth int64, height int64, price float64) (ret0 []workflow.LuggageItem, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.FindItems(ctx, color, length, breadth, height, price)
}

func (pool *LuggageService_HealthChecker_ClientPool) GetItemById(ctx context.Context, id string) (ret0 workflow.LuggageItem, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.GetItemById(ctx, id)
}

func (pool *LuggageService_HealthChecker_ClientPool) Health(ctx context.Context) (ret0 string, err error) {
	client, err := pool.clients.Pop(ctx)
	if err != nil {
		return
	}
	defer pool.clients.Push(client)
	return client.Health(ctx)
}



