// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"context"
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"blueprint/goproc/reserv_proc/healthcheck"
)

type ReservationService_HTTPServerHandler struct {
	Service healthcheck.ReservationService_HealthChecker
	Address string
}

func New_ReservationService_HTTPServerHandler(ctx context.Context, service healthcheck.ReservationService_HealthChecker, serverAddress string) (*ReservationService_HTTPServerHandler, error) {
	handler := &ReservationService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *ReservationService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/CheckAvailability").HandlerFunc(handler.CheckAvailability)
	
	router.Path("/Cleanup").HandlerFunc(handler.Cleanup)
	
	router.Path("/Health").HandlerFunc(handler.Health)
	
	router.Path("/MakeReservation").HandlerFunc(handler.MakeReservation)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *ReservationService_HTTPServerHandler) CheckAvailability(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	request_item_ids := r.URL.Query().Get("item_ids")
	var item_ids []string
	if request_item_ids != "" {
		err = json.Unmarshal([]byte(request_item_ids), &item_ids)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	startdate := r.URL.Query().Get("startdate")
	
	enddate := r.URL.Query().Get("enddate")
	
	ctx := context.Background()
	ret0, err := handler.Service.CheckAvailability(ctx, item_ids, startdate, enddate)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *ReservationService_HTTPServerHandler) Cleanup(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	err = handler.Service.Cleanup(ctx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

func (handler *ReservationService_HTTPServerHandler) Health(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	ret0, err := handler.Service.Health(ctx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *ReservationService_HTTPServerHandler) MakeReservation(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	luggageid := r.URL.Query().Get("luggageid")
	
	user := r.URL.Query().Get("user")
	
	startdate := r.URL.Query().Get("startdate")
	
	enddate := r.URL.Query().Get("enddate")
	
	ctx := context.Background()
	ret0, err := handler.Service.MakeReservation(ctx, luggageid, user, startdate, enddate)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 bool
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

