// Blueprint: Auto-generated by the HTTP Plugin
package http

import (
	"io"
	"errors"
	"github.com/blueprint-uservices/cldrel_course/luggageshare/workflow"
	"net/http"
	"encoding/json"
	"context"
	"net/url"
	"fmt"
)

type UserProfileService_HTTPClient struct {
	Client *http.Client
	ServerAddress string
}

func New_UserProfileService_HTTPClient(ctx context.Context, serverAddress string) (*UserProfileService_HTTPClient, error) {
	defaultRoundTripper := http.DefaultTransport
	defaultTransportPointer, ok := defaultRoundTripper.(*http.Transport)
	if !ok {
		return nil, errors.New("defaultRoundTripper not an *http.Transport")
	}
	defaultTransport := *defaultTransportPointer // dereference it to get a copy of the struct that the pointer points to
	defaultTransport.MaxIdleConns = 60000
	defaultTransport.MaxIdleConnsPerHost = 60000
	defaultTransport.MaxConnsPerHost = 10000
	client := &http.Client{
		Transport: &defaultTransport,
	}
	c := &UserProfileService_HTTPClient{}
	c.Client = client
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}


func (client *UserProfileService_HTTPClient) AddItem(ctx context.Context, username string, item_id string) (err error) {
	vals := url.Values{}
	
	vals.Add("username", username)
	
	vals.Add("item_id", item_id)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/AddItem")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	return
}

func (client *UserProfileService_HTTPClient) Cleanup(ctx context.Context) (err error) {
	vals := url.Values{}
	

	encoded_url, err := url.Parse(client.ServerAddress + "/Cleanup")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	return
}

func (client *UserProfileService_HTTPClient) GetUserItemIds(ctx context.Context, username string) (ret0 []string, err error) {
	vals := url.Values{}
	
	vals.Add("username", username)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/GetUserItemIds")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 []string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *UserProfileService_HTTPClient) GetUserProfile(ctx context.Context, username string) (ret0 workflow.UserProfile, err error) {
	vals := url.Values{}
	
	vals.Add("username", username)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/GetUserProfile")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 workflow.UserProfile
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *UserProfileService_HTTPClient) Health(ctx context.Context) (ret0 string, err error) {
	vals := url.Values{}
	

	encoded_url, err := url.Parse(client.ServerAddress + "/Health")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *UserProfileService_HTTPClient) UpdateUserProfile(ctx context.Context, profile workflow.UserProfile) (err error) {
	vals := url.Values{}
	
	bytes_profile, err := json.Marshal(profile)
	if err != nil {
		return
	}
	vals.Add("profile", string(bytes_profile))
	

	encoded_url, err := url.Parse(client.ServerAddress + "/UpdateUserProfile")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	return
}

