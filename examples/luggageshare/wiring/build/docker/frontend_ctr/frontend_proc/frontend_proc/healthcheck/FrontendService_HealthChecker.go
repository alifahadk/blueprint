// Blueprint: Auto-generated by HealthChecker Plugin
package healthcheck

import (
	"github.com/blueprint-uservices/cldrel_course/luggageshare/workflow"
	"context"
)

type FrontendService_HealthChecker interface {
	AddItem(ctx context.Context, color string, length int64, breadth int64, height int64, price float64, username string) (string, error)
	CreateUserProfile(ctx context.Context, username string, email string, address string) (error)
	Health(ctx context.Context) (string, error)
	MakeReservation(ctx context.Context, luggageid string, username string, startdate string, enddate string) (bool, error)
	Search(ctx context.Context, color string, length int64, breadth int64, height int64, price float64, startDate string, endDate string) ([]workflow.LuggageInfo, error)
	WriteReview(ctx context.Context, luggageid string, text string, username string, rating int64) (error)
	
}

type FrontendService_HealthCheckHandler struct {
	Service workflow.FrontendService
}

func New_FrontendService_HealthCheckHandler(ctx context.Context, service workflow.FrontendService) (*FrontendService_HealthCheckHandler, error) {
	handler := &FrontendService_HealthCheckHandler{}
	handler.Service = service
	return handler, nil
}


func (handler *FrontendService_HealthCheckHandler) AddItem(ctx context.Context, color string, length int64, breadth int64, height int64, price float64, username string) (string, error) {
	return handler.Service.AddItem(ctx, color, length, breadth, height, price, username)
}

func (handler *FrontendService_HealthCheckHandler) CreateUserProfile(ctx context.Context, username string, email string, address string) (error) {
	return handler.Service.CreateUserProfile(ctx, username, email, address)
}

func (handler *FrontendService_HealthCheckHandler) MakeReservation(ctx context.Context, luggageid string, username string, startdate string, enddate string) (bool, error) {
	return handler.Service.MakeReservation(ctx, luggageid, username, startdate, enddate)
}

func (handler *FrontendService_HealthCheckHandler) Search(ctx context.Context, color string, length int64, breadth int64, height int64, price float64, startDate string, endDate string) ([]workflow.LuggageInfo, error) {
	return handler.Service.Search(ctx, color, length, breadth, height, price, startDate, endDate)
}

func (handler *FrontendService_HealthCheckHandler) WriteReview(ctx context.Context, luggageid string, text string, username string, rating int64) (error) {
	return handler.Service.WriteReview(ctx, luggageid, text, username, rating)
}

func (handler *FrontendService_HealthCheckHandler) Health(ctx context.Context) (string, error) {
	return "Healthy", nil
}
