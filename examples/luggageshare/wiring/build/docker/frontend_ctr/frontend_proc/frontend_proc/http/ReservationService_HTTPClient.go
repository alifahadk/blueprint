// Blueprint: Auto-generated by the HTTP Plugin
package http

import (
	"fmt"
	"io"
	"errors"
	"net/http"
	"encoding/json"
	"context"
	"net/url"
)

type ReservationService_HTTPClient struct {
	Client *http.Client
	ServerAddress string
}

func New_ReservationService_HTTPClient(ctx context.Context, serverAddress string) (*ReservationService_HTTPClient, error) {
	defaultRoundTripper := http.DefaultTransport
	defaultTransportPointer, ok := defaultRoundTripper.(*http.Transport)
	if !ok {
		return nil, errors.New("defaultRoundTripper not an *http.Transport")
	}
	defaultTransport := *defaultTransportPointer // dereference it to get a copy of the struct that the pointer points to
	defaultTransport.MaxIdleConns = 60000
	defaultTransport.MaxIdleConnsPerHost = 60000
	defaultTransport.MaxConnsPerHost = 10000
	client := &http.Client{
		Transport: &defaultTransport,
	}
	c := &ReservationService_HTTPClient{}
	c.Client = client
	c.ServerAddress = "http://" + serverAddress
	return c, nil
}


func (client *ReservationService_HTTPClient) CheckAvailability(ctx context.Context, item_ids []string, startdate string, enddate string) (ret0 []string, err error) {
	vals := url.Values{}
	
	bytes_item_ids, err := json.Marshal(item_ids)
	if err != nil {
		return
	}
	vals.Add("item_ids", string(bytes_item_ids))
	
	vals.Add("startdate", startdate)
	
	vals.Add("enddate", enddate)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/CheckAvailability")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 []string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *ReservationService_HTTPClient) Cleanup(ctx context.Context) (err error) {
	vals := url.Values{}
	

	encoded_url, err := url.Parse(client.ServerAddress + "/Cleanup")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	return
}

func (client *ReservationService_HTTPClient) Health(ctx context.Context) (ret0 string, err error) {
	vals := url.Values{}
	

	encoded_url, err := url.Parse(client.ServerAddress + "/Health")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

func (client *ReservationService_HTTPClient) MakeReservation(ctx context.Context, luggageid string, user string, startdate string, enddate string) (ret0 bool, err error) {
	vals := url.Values{}
	
	vals.Add("luggageid", luggageid)
	
	vals.Add("user", user)
	
	vals.Add("startdate", startdate)
	
	vals.Add("enddate", enddate)
	

	encoded_url, err := url.Parse(client.ServerAddress + "/MakeReservation")
	if err != nil {
		return
	}
	encoded_url.RawQuery = vals.Encode()

	resp, err := client.Client.Get(encoded_url.String())
	if err != nil {
		return
	}
	defer resp.Body.Close()
	statusOk := resp.StatusCode >= 200 && resp.StatusCode < 300
	if !statusOk {
		err = fmt.Errorf("StatusCode was %d", resp.StatusCode)
		return
	}
	response := struct {
		
		Ret0 bool
		
	}{}
	resp_bytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return
	}
	err = json.Unmarshal(resp_bytes, &response)
	if err != nil {
		return
	}
	
	ret0 = response.Ret0
	
	return
}

