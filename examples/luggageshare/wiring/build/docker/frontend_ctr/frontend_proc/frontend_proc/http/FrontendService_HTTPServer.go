// Blueprint: Auto-generated by HTTP Plugin
package http

import (
	"encoding/json"
	"net/http"
	"github.com/gorilla/mux"
	"blueprint/goproc/frontend_proc/healthcheck"
	"github.com/blueprint-uservices/cldrel_course/luggageshare/workflow"
	"context"
)

type FrontendService_HTTPServerHandler struct {
	Service healthcheck.FrontendService_HealthChecker
	Address string
}

func New_FrontendService_HTTPServerHandler(ctx context.Context, service healthcheck.FrontendService_HealthChecker, serverAddress string) (*FrontendService_HTTPServerHandler, error) {
	handler := &FrontendService_HTTPServerHandler{}
	handler.Service = service
	handler.Address = serverAddress
	return handler, nil
}

// Blueprint: Run is called automatically in a separate goroutine by runtime/plugins/golang/di.go
func (handler *FrontendService_HTTPServerHandler) Run(ctx context.Context) error {
	router := mux.NewRouter()
	// Add paths for the mux router
	
	router.Path("/AddItem").HandlerFunc(handler.AddItem)
	
	router.Path("/CreateUserProfile").HandlerFunc(handler.CreateUserProfile)
	
	router.Path("/Health").HandlerFunc(handler.Health)
	
	router.Path("/MakeReservation").HandlerFunc(handler.MakeReservation)
	
	router.Path("/Search").HandlerFunc(handler.Search)
	
	router.Path("/WriteReview").HandlerFunc(handler.WriteReview)
	
	srv := &http.Server {
		Addr: handler.Address,
		Handler: router,
	}

	go func() {
		select {
		case <-ctx.Done():
			srv.Shutdown(ctx)
		}
	}()

	return srv.ListenAndServe()
}


func (handler *FrontendService_HTTPServerHandler) AddItem(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	color := r.URL.Query().Get("color")
	
	request_length := r.URL.Query().Get("length")
	var length int64
	if request_length != "" {
		err = json.Unmarshal([]byte(request_length), &length)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_breadth := r.URL.Query().Get("breadth")
	var breadth int64
	if request_breadth != "" {
		err = json.Unmarshal([]byte(request_breadth), &breadth)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_height := r.URL.Query().Get("height")
	var height int64
	if request_height != "" {
		err = json.Unmarshal([]byte(request_height), &height)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_price := r.URL.Query().Get("price")
	var price float64
	if request_price != "" {
		err = json.Unmarshal([]byte(request_price), &price)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	username := r.URL.Query().Get("username")
	
	ctx := context.Background()
	ret0, err := handler.Service.AddItem(ctx, color, length, breadth, height, price, username)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) CreateUserProfile(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	username := r.URL.Query().Get("username")
	
	email := r.URL.Query().Get("email")
	
	address := r.URL.Query().Get("address")
	
	ctx := context.Background()
	err = handler.Service.CreateUserProfile(ctx, username, email, address)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) Health(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	ctx := context.Background()
	ret0, err := handler.Service.Health(ctx)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 string
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) MakeReservation(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	luggageid := r.URL.Query().Get("luggageid")
	
	username := r.URL.Query().Get("username")
	
	startdate := r.URL.Query().Get("startdate")
	
	enddate := r.URL.Query().Get("enddate")
	
	ctx := context.Background()
	ret0, err := handler.Service.MakeReservation(ctx, luggageid, username, startdate, enddate)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 bool
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) Search(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	color := r.URL.Query().Get("color")
	
	request_length := r.URL.Query().Get("length")
	var length int64
	if request_length != "" {
		err = json.Unmarshal([]byte(request_length), &length)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_breadth := r.URL.Query().Get("breadth")
	var breadth int64
	if request_breadth != "" {
		err = json.Unmarshal([]byte(request_breadth), &breadth)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_height := r.URL.Query().Get("height")
	var height int64
	if request_height != "" {
		err = json.Unmarshal([]byte(request_height), &height)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	request_price := r.URL.Query().Get("price")
	var price float64
	if request_price != "" {
		err = json.Unmarshal([]byte(request_price), &price)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	startDate := r.URL.Query().Get("startDate")
	
	endDate := r.URL.Query().Get("endDate")
	
	ctx := context.Background()
	ret0, err := handler.Service.Search(ctx, color, length, breadth, height, price, startDate, endDate)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
		Ret0 []workflow.LuggageInfo
		
	}{}
	
	response.Ret0 = ret0
	
	json.NewEncoder(w).Encode(response)
}

func (handler *FrontendService_HTTPServerHandler) WriteReview(w http.ResponseWriter, r *http.Request) {
	var err error
	defer r.Body.Close()
	
	luggageid := r.URL.Query().Get("luggageid")
	
	text := r.URL.Query().Get("text")
	
	username := r.URL.Query().Get("username")
	
	request_rating := r.URL.Query().Get("rating")
	var rating int64
	if request_rating != "" {
		err = json.Unmarshal([]byte(request_rating), &rating)
		if err != nil {
			http.Error(w, err.Error(), 500)
			return
		}
	}
	
	ctx := context.Background()
	err = handler.Service.WriteReview(ctx, luggageid, text, username, rating)
	if err != nil {
		http.Error(w, err.Error(), 500)
		return
	}
	response := struct {
		
	}{}
	
	json.NewEncoder(w).Encode(response)
}

